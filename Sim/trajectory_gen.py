"""
Script to convert the .xlsx format of trajectory generated by the GP process
into a python dictionary .json file.
dictionary={'1':{'x':[],'y':[],'vx':[],'vy':[]}}

Author: Ashish Roongta
"""
import numpy as np
import pandas as pd
import json
import os
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
import glob

def linear_interp(x,y,vx,vy):
    """
    Fucntion for linear interpolation of x,y,vx,vy.
    """
    b=[]
    c=[]
    eps=0.1

    for i in range(len(x)-1):
        dist=np.linalg.norm([x[i+1]-x[i],y[i+1]-y[i]],ord=2)
        b.append(x[i])
        c.append(y[i])
        if dist>eps:
            fx,fy=interp1d(np.array([0,dist]),np.array([x[i],x[i+1]])),interp1d(np.array([0,dist]),np.array([y[i],y[i+1]]))
            alpha=np.linspace(0.1,dist-0.1,dist/eps)
            b+=list(fx(alpha))
            c+=list(fy(alpha))
        b.append(x[i+1])
        c.append(y[i+1])
    # Removing duplicates
    """ref_traj=np.hstack((np.array(b).reshape(-1,1),np.array(c).reshape(-1,1)))
    b=[]
    c=[]
    i_old = 0
    i = 0
    while i < len(ref_traj)-1:
        dist = np.linalg.norm(ref_traj[i,:1]-ref_traj[i_old,:1])
        if dist<eps:
            i = i + 1
            continue
        # ref_traj_out.append([ref_traj[i_old][0],ref_traj[i_old][1]])
        b.append(ref_traj[i_old][0])
        c.append(ref_traj[i_old][1])
        i_old = i
        i = i + 1
    """
    # Interpolating Velocities  
    fvx,fvy=interp1d(x,vx),interp1d(y,vy)
    vvx,vvy=fvx(b),fvy(c)

    # plt.scatter(b,c)
    # plt.scatter(x,y,c='r',marker='+')
    # plt.show()
    return list(b),list(c),list(vvx),list(vvy)


def traj_data(file_name):
    """
    Function to take in the file name, rand and parse it.
    Saves the trajectory and reference velocities in a dictionary.json file.
    """
    unit_Feet=False
    # file_name='Data/'+file_name

    if unit_Feet:
        fc=0.3048
    else:
        fc=1
    xl_book=pd.read_excel(file_name, header=None).values
    # print(file_name)
    t=xl_book[:,0]
    x=(xl_book[:,1])*fc
    y=-(xl_book[:,2])*fc
    vx=(xl_book[:,3])*fc
    vy=-(xl_book[:,4])*fc

    #  Computing the number of vehicles in the data
    p1=t[0]
    for h in range(1,len(t)):
        if not(p1==t[h]):
            break
    numV=h
    print('number of vehicles in the data: {}'.format(numV))

    traj={str(i):{'x':[],'y':[],'vx':[],'vy':[]}for i in range(1,numV+1)}
    for i in range(t.shape[0]):
        p=i%numV
        p=str(p+1)
        traj[p]['x'].append(x[i])
        traj[p]['y'].append(y[i])
        traj[p]['vx'].append(vx[i])
        traj[p]['vy'].append(vy[i])
    
    # Linear Interpolation of trajectories

    # for i in traj.keys():
    #     x,y,vx,vy=traj[i]['x'],traj[i]['y'],traj[i]['vx'],traj[i]['vy']
    #     ix,iy,ivx,ivy=linear_interp(x,y,vx,vy)
    #     traj[i]['x']=ix
    #     traj[i]['y']=iy
    #     traj[i]['vx']=ivx
    #     traj[i]['vy']=ivy
    # Saving the dictionary as a .json file.
    s_name=file_name.split('.')[0]+'.json'
    with open(s_name,'w') as fd:
        json.dump(traj,fd)
    print('{} Saved..'.format(s_name))
    print('_____________________________________')

if __name__=='__main__':
    a=glob.glob("Data/*.xlsx")
    # a=["Data/Carla_Town04_T2_Pattern110_FrameEdge_sim_traj.xlsx"]
    for f in a:
        traj_data(f)